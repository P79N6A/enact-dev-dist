"use strict";

exports.__esModule = true;
exports.default = void 0;

var _helperPluginUtils = require("@babel/helper-plugin-utils");

var _pluginSyntaxLogicalAssignmentOperators = _interopRequireDefault(require("@babel/plugin-syntax-logical-assignment-operators"));

var _core = require("@babel/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _helperPluginUtils.declare)(function (api) {
  api.assertVersion(7);
  return {
    inherits: _pluginSyntaxLogicalAssignmentOperators.default,
    visitor: {
      AssignmentExpression: function AssignmentExpression(path) {
        var node = path.node,
            scope = path.scope;
        var operator = node.operator,
            left = node.left,
            right = node.right;

        if (operator !== "||=" && operator !== "&&=") {
          return;
        }

        var ref;

        if (_core.types.isMemberExpression(left)) {
          var object = left.object;
          var memo = scope.maybeGenerateMemoised(object);

          if (memo) {
            path.get("left.object").replaceWith(_core.types.assignmentExpression("=", _core.types.cloneNode(memo), object));
            ref = _core.types.cloneNode(left);
            ref.object = _core.types.cloneNode(memo);
          }
        }

        path.replaceWith(_core.types.logicalExpression(operator.slice(0, -1), left, _core.types.assignmentExpression("=", ref || _core.types.cloneNode(left), right)));
      }
    }
  };
});

exports.default = _default;