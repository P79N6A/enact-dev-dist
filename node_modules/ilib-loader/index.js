var
	path = require('path'),
	fs = require('graceful-fs'),
	glob = require('glob'),
	NodeOutputFileSystem = undefined,
	scanned = {};

try {
	NodeOutputFileSystem = require('webpack/lib/node/NodeOutputFileSystem');
} catch(e) {
	throw new Error('iLib loader is not compatible with standalone global installs of Webpack.');
}

function exists(item) {
	try {
		return !!(fs.statSync(item));
	} catch(e) {
		return false;
	}
}

function readManifest(manifest, loader) {
	var files = [];
	if(exists(manifest)) {
		var raw = fs.readFileSync(manifest, {encoding:'utf8'});
		files = (JSON.parse(raw || '{}') || {}).files || [];
		files.unshift('ilibmanifest.json');
	} else {
		loader.emitWarning('App-level localization resource manifest not found. Generating ilibmanifest.json to prevent iLib errors.');
		files = glob.sync('./**/*.json', {nodir:true, cwd:path.dirname(manifest)});
		for(var i=0; i<files.length; i++) {
			files[i] = files[i].replace(/^\.\//, '');
		}
		var data = JSON.stringify({files:files}, null, '\t');
		if(!loader.query || loader.query.indexOf('noSave')===-1) {
			fs.writeFileSync(manifest, data, {encoding:'utf8'});
			files.unshift('ilibmanifest.json');
		} else {
			loader.emitFile(path.relative(loader.options.context, manifest).replace(/\.\.(\/)?/g, "_$1"), data);
		}
	}
	return files;
}

function shouldEmitFile(file, loader) {
	if(loader.isNodeOutputFS) {
		try {
			var src = fs.statSync(file);
			var relPath = path.relative(process.cwd(), file);
			var dest = fs.statSync(path.join(loader.options.output.path, relPath.replace(/\.\.(\/)?/g, "_$1")));
			return src.isDirectory() || src.mtime.getTime()>dest.mtime.getTime();
		} catch(e) {
			return true;
		}
	} else {
		return true;
	}
}

function emitAssets(root, files, loader, callback) {
	var limit = 16;
	var active = 0;
	var handleFile = function() {
		if(files.length>0) {
			active++;
			var f = path.join(root, files.shift());
			if(shouldEmitFile(f, loader)) {
				fs.readFile(f, {encoding:'utf8'}, function(err, content) {
					if(err) throw err;
					loader.emitFile(path.relative(loader.options.context, f).replace(/\.\.(\/)?/g, "_$1"), content);
					active--;
					handleFile();
				});
			} else {
				active--;
				handleFile();
			}
		} else {
			if(active===0) {
				callback(path.relative(loader.options.context, root).replace(/\\/g, '/').replace(/\.\.(\/)?/g, "_$1"));
			}
		}
	};
	if(!scanned[root] && (!loader.query || loader.query.indexOf('noEmit')===-1) && process.env.ILIB_ASSET_ACTION!=='skip') {
		scanned[root] = true;
		for(var i=0; i<limit && i<files.length; i++) {
			handleFile();
		}
	} else {
		callback(path.relative(loader.options.context, root).replace(/\\/g, '/').replace(/\.\.(\/)?/g, "_$1"));
	}
}

function emitAssetsSync(root, files, loader) {
	if(!scanned[root] && (!loader.query || loader.query.indexOf('noEmit')===-1) && process.env.ILIB_ASSET_ACTION!=='skip') {
		scanned[root] = true;
		files.forEach(function(f) {
			f = path.join(root, f);
			if(shouldEmitFile(f, loader)) {
				var content = fs.readFileSync(f, {encoding:'utf8'});
				loader.emitFile(path.relative(loader.options.context, f).replace(/\.\.(\/)?/g, "_$1"), content);
			}
		});
	}
	return path.relative(loader.options.context, root).replace(/\\/g, '/').replace(/\.\.(\/)?/g, "_$1");
}

function createExportsString(bundlePath, includeResources) {
	if(includeResources) {
		return 'module.exports = { path: __webpack_public_path__ + \'' + bundlePath.replace(/\\/g, '/')
				+ '\', resources:__webpack_public_path__ + \'resources\'};';
	} else {
		return 'module.exports = { path: __webpack_public_path__ + \'' + bundlePath + '\'};';
	}
}

module.exports = function(content) {
	this.cacheable && this.cacheable();
	NodeOutputFileSystem.prototype.writeFile = fs.writeFile.bind(fs);
	this.isNodeOutputFS = (this._compiler.outputFileSystem.writeFile===NodeOutputFileSystem.prototype.writeFile);
	var root = path.dirname(this.resourcePath);
	var isCoreLocaleData = root.replace(/\\/g, '/').endsWith('i18n/ilib/locale');
	var manifestFiles = readManifest(this.resourcePath, this);

	if(isCoreLocaleData) {
		if(!exists('./resources')) {
			fs.mkdirSync('./resources');
		}
		var resourceFiles = readManifest('./resources/ilibmanifest.json', this);
		emitAssetsSync('./resources', resourceFiles, this);
		if(process.env.ILIB_LOCALE_PATH) {
			return createExportsString(process.env.ILIB_LOCALE_PATH, true);
		}
	}

	var callback = this.async();
	if(!callback) {
		return createExportsString(emitAssetsSync(root, manifestFiles, this), isCoreLocaleData);
	} else {
		emitAssets(root, manifestFiles, this, function(exportPath) {
			callback(null, createExportsString(exportPath, isCoreLocaleData));
		});
	}
};
